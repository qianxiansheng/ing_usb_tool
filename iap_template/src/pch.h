#pragma once

#include <iostream>

#define APP_X				100
#define APP_Y				50
#define APP_WIDTH			600
#define APP_HEIGHT			400
#define APP_TITLE           L"USB IAP tool"
#define DEFAULT_FONT		"c:\\Windows\\Fonts\\simhei.ttf"

#define EP_MAX_SIZE  64
#define DATA_INPUT_BUFF_MAX_SIZE 4096
#define BIN_NAME_BUFF_MAX_SIZE 128

#define BIN_CONFIG_DEFAULT_IDENTIFY "INGCHIPS"

#define ImGuiDCXAxisAlign(v) ImGui::SetCursorPos(ImVec2((v), ImGui::GetCursorPos().y))
#define ImGuiDCYMargin(v) ImGui::SetCursorPos(ImVec2(ImGui::GetCursorPos().x, ImGui::GetCursorPos().y + (v)))

#define IAP_HEADER_SIZE 128

// 7 = 1 + 1 + 2 + 2 + 1
// 1:header
// 1:ctrl_1
// 2:pack_ctrl 
// 2:length
// 1:bcc
#define IAP_PRO_TRANSFER_ATT_SIZE 7
// 5 = 1 + 2 + 2
// 1:cmd
// 2:length
// 2:crc
#define IAP_PRO_BUSINESS_ATT_SIZE 5
// 7 = 1 + 1 + 1 + 2 + 2
// 1:cmd
// 1:errCode
// 1:rspCmd
// 2:length
// 2:crc
#define IAP_PRO_BUSINESS_ACK_ATT_SIZE 7
// 6 = 2 + 4
// 2:blockIdx
// 4:offset
#define IAP_PRO_BUSINESS_FLASH_WRITE_ATT_SIZE 6
// 6 = 4 + 2
// 4:offset
// 2:size
#define IAP_PRO_BUSINESS_READ_WRITE_ATT_SIZE 6

#define IAP_USB_UID_EP_MPS              (64)
#define IAP_USB_HID_REPORT_SIZE         (64)
#define IAP_USB_HID_REPORT_ID           (0x3F)
#define IAP_USB_HID_REPORT_CONTENT_SIZE (IAP_USB_HID_REPORT_SIZE - 1)   //ReportID:1
#define IAP_PRO_TRANSFER_SIZE           (IAP_USB_HID_REPORT_CONTENT_SIZE)
#define IAP_PRO_TRANSFER_PAYLOAD_SIZE   (IAP_PRO_TRANSFER_SIZE - IAP_PRO_TRANSFER_ATT_SIZE)

#define IAP_PRO_TRANSFER_HEADER 0xAA

#define IAP_PRO_MAX_BLOCK_SIZE 0x2000
#define IAP_PRO_BUSINESS_FLASH_WRITE_PAYLOAD_MAX_SIZE   (IAP_PRO_MAX_BLOCK_SIZE + IAP_PRO_BUSINESS_FLASH_WRITE_ATT_SIZE)
#define IAP_PRO_BUSINESS_FLASH_WRITE_BUF_MAX_SIZE       (IAP_PRO_BUSINESS_FLASH_WRITE_PAYLOAD_MAX_SIZE + IAP_PRO_BUSINESS_ATT_SIZE)
#define IAP_PRO_BUSINESS_PAYLOAD_MAX_SIZE               (IAP_PRO_BUSINESS_FLASH_WRITE_PAYLOAD_MAX_SIZE)

#define IAP_PRO_BUSINESS_FLASH_READ_PAYLOAD_MAX_SIZE    (IAP_PRO_MAX_BLOCK_SIZE + IAP_PRO_BUSINESS_READ_WRITE_ATT_SIZE)
#define IAP_PRO_BUSINESS_FLASH_READ_BUF_MAX_SIZE        (IAP_PRO_BUSINESS_FLASH_READ_PAYLOAD_MAX_SIZE + IAP_PRO_BUSINESS_ACK_ATT_SIZE)
#define IAP_PRO_BUSINESS_ACK_PAYLOAD_MAX_SIZE           (IAP_PRO_BUSINESS_FLASH_READ_PAYLOAD_MAX_SIZE)
#define IAP_PRO_BUSINESS_ACK_MAX_SIZE                   (IAP_PRO_BUSINESS_ACK_PAYLOAD_MAX_SIZE + IAP_PRO_BUSINESS_ACK_ATT_SIZE)

#define IAP_PACK_ERROR "PACK ERROR"

#define IAP_GEN_EXE_SUFFIX 0x5F2C6AAC

typedef enum
{
    USB_REQUEST_HID_CLASS_DESCRIPTOR_HID = 0x21,
    USB_REQUEST_HID_CLASS_DESCRIPTOR_REPORT = 0x22,
    USB_REQUEST_HID_CLASS_DESCRIPTOR_PHYSICAL_DESCRIPTOR = 0x23
} USB_REQUEST_HID_CLASS_DESCRIPTOR_TYPES_E;

typedef enum
{
    USB_REQUEST_HID_CLASS_REQUEST_REPORT_INPUT = 0x01,
    USB_REQUEST_HID_CLASS_REQUEST_REPORT_OUTPUT = 0x02,
    USB_REQUEST_HID_CLASS_REQUEST_REPORT_FEATURE = 0x03
} USB_REQUEST_HID_CLASS_REQUEST_REPORT_TYPE_E;

typedef enum
{
    USB_REQUEST_HID_CLASS_REQUEST_GET_REPORT = 0x01,
    USB_REQUEST_HID_CLASS_REQUEST_GET_IDLE = 0x02,
    USB_REQUEST_HID_CLASS_REQUEST_GET_PROTOCOL = 0x03,
    USB_REQUEST_HID_CLASS_REQUEST_SET_REPORT = 0x09,
    USB_REQUEST_HID_CLASS_REQUEST_SET_IDLE = 0x0A,
    USB_REQUEST_HID_CLASS_REQUEST_SET_PROTOCOL = 0x0B
} USB_REQUEST_HID_CLASS_REQUEST_TYPES_E;